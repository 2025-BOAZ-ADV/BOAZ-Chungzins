import os
import torch
import torchaudio
import numpy as np
import pandas as pd
from torch.utils.data import Dataset
from tqdm import tqdm
from pathlib import Path
from data.cache import DataCache
from data.preprocessor import get_class, generate_mel_spectrogram, resample_waveform

class CycleDataset(Dataset):
    def __init__(self, data_path, metadata_path=None, transform=None, target_sr=4000, use_cache=True):
        """
        Args:
            data_path (str): raw 데이터가 있는 디렉토리 경로
            metadata_path (str, optional): train/test split 메타데이터 경로
            transform (callable, optional): 데이터 증강을 위한 transform 함수
            target_sr (int): 목표 샘플링 레이트
            use_cache (bool): 전처리된 데이터 캐싱 사용 여부
        """
        self.data_path = data_path
        self.transform = transform
        self.target_sr = target_sr
        self.cycle_list = []
        
        # 캐시 초기화
        self.cache = DataCache('data/processed') if use_cache else None
        
        # 모든 wav 파일 리스트 가져오기
        self.file_list = [f[:-4] for f in os.listdir(data_path) 
                         if f.endswith('.wav')]
        
        # train/test split이 있다면 로드
        if metadata_path:
            split_df = pd.read_csv(os.path.join(metadata_path, 'train_test_split.txt'),
                                 sep='\t', header=None, names=['filename', 'split'])
            self.file_list = split_df[split_df['split'] == 'train']['filename'].tolist()

        print("[INFO] Preprocessing cycles...")
        for filename in tqdm(self.file_list):
            txt_path = os.path.join(self.data_path, filename + '.txt')
            wav_path = os.path.join(self.data_path, filename + '.wav')

            if not os.path.exists(txt_path) or not os.path.exists(wav_path):
                print(f"[WARNING] Missing file: {txt_path} or {wav_path}")
                continue

            # 주석 데이터 로드
            cycle_data = np.loadtxt(txt_path, usecols=(0, 1))
            lung_label = np.loadtxt(txt_path, usecols=(2, 3))

            for idx in range(len(cycle_data)):
                # 호흡 주기 start, end
                start_sample = int(cycle_data[idx, 0] * self.target_sr)
                end_sample = int(cycle_data[idx, 1] * self.target_sr)
                lung_duration = cycle_data[idx, 1] - cycle_data[idx, 0]

                if end_sample <= start_sample:
                    continue
                
                # 캐시 키 생성
                cache_key = f"{filename}_{idx}"
                
                # 캐시된 mel spectrogram이 있으면 로드
                if self.cache and self.cache.exists(cache_key):
                    mel = self.cache.load(cache_key)
                else:
                    # 파형 데이터 로드
                    waveform, orig_sr = torchaudio.load(wav_path)
                    if waveform.shape[0] > 1:  # 스테레오를 모노로 변환
                        waveform = torch.mean(waveform, dim=0, keepdim=True)

                    # 리샘플링
                    waveform = resample_waveform(waveform, orig_sr, self.target_sr)
                    
                    # 파형 자르기 & Mel spectrogram 변환
                    cycle_wave = waveform[:, start_sample:end_sample]
                    mel = generate_mel_spectrogram(cycle_wave, self.target_sr)
                    
                    # 캐시에 저장
                    if self.cache:
                        self.cache.save(cache_key, mel)

                # 라벨 생성
                cr = int(lung_label[idx, 0])
                wh = int(lung_label[idx, 1])
                label = get_class(cr, wh)
                
                # 환자 ID 추출
                patient_id = int(filename.split('_')[0])

                # 메타데이터
                meta_data = {
                    'filename': filename,
                    'duration': lung_duration,
                    'patient_id': patient_id,
                    'label': label
                }
                
                self.cycle_list.append((mel, meta_data))

        print(f"[INFO] Total cycles collected: {len(self.cycle_list)}")

    def __len__(self):
        return len(self.cycle_list)

    def __getitem__(self, idx):
        mel, meta_data = self.cycle_list[idx]
        
        if self.transform:
            mel = self.transform(mel)
            
        return mel, meta_data

class MoCoCycleDataset(CycleDataset):
    """MoCo 학습을 위한 데이터셋 클래스"""
    
    def __getitem__(self, idx):
        """두 개의 다른 augmentation을 적용하여 positive pair를 생성"""
        mel, meta_data = self.cycle_list[idx]
        
        if self.transform:
            mel_q = self.transform(mel.clone())
            mel_k = self.transform(mel.clone())
        else:
            mel_q = mel
            mel_k = mel
            
        return {
            'query': mel_q,
            'key': mel_k,
            'patient_id': meta_data['patient_id'],
            'meta': meta_data
        }
